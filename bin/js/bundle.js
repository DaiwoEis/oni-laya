var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const FadeControl_1 = require("./uiscript/extend/FadeControl");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("uiscript/extend/FadeControl.ts", FadeControl_1.default);
    }
}
GameConfig.width = 640;
GameConfig.height = 1136;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "view/TitleView.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = true;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();
},{"./uiscript/extend/FadeControl":16}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
const Application_1 = require("./core/Application");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        //GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        Application_1.default.instance;
        Laya.timer.frameLoop(1, null, () => {
            Application_1.default.instance.update();
        });
    }
}
//激活启动类
new Main();
},{"./GameConfig":1,"./core/Application":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Singleton_1 = require("./Singleton");
const TitleSceneControl_1 = require("../script/scene/TitleSceneControl");
const SceneManager_1 = require("../gameplay/SceneManager");
const TitleView_1 = require("../uiscript/view/TitleView");
class Application {
    constructor() {
        this.init();
    }
    static get instance() {
        return Singleton_1.default.getInstance(Application);
    }
    init() {
        SceneManager_1.default.instance.init();
        SceneManager_1.default.instance.loadSence3D("3dres/LayaScene_TitleScene_Laya/Conventional/TitleScene_Laya.ls").then(s => {
            SceneManager_1.default.instance.setActive3DScene(s);
            s.addComponent(TitleSceneControl_1.default);
        });
        SceneManager_1.default.instance.loadSence("view/TitleView.scene").then(s => {
            s.addComponent(TitleView_1.default);
            s.open();
        });
    }
    update() {
    }
}
Application.IS_DRAW_DEBUG_FLOOR_MODEL = false;
exports.default = Application;
},{"../gameplay/SceneManager":9,"../script/scene/TitleSceneControl":15,"../uiscript/view/TitleView":17,"./Singleton":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class GameUtility {
    static getChildByName(root, name) {
        let rootCtrl = root;
        if (rootCtrl.name == name)
            return rootCtrl;
        for (let i = 0; i < rootCtrl.numChildren; ++i) {
            let ctrl = GameUtility.getChildByName(rootCtrl.getChildAt(i), name);
            if (ctrl != null)
                return ctrl;
        }
        return null;
    }
    static getCtrlByBreadth(root, name, maxSearchDepth = 5) {
        if (name == root.name) {
            return root;
        }
        for (let i = 0; i < root.numChildren; ++i) {
            let ctrl = GameUtility.getControlBFS(root, name, i);
            if (ctrl) {
                return ctrl;
            }
        }
        return null;
    }
    static getControlBFS(root, name, targetDepth) {
        if (targetDepth == 0) {
            for (let i = 0; i < root.numChildren; ++i) {
                if (root.getChildAt(i).name == name) {
                    return root.getChildAt(i);
                }
            }
            return null;
        }
        else {
            for (let i = 0; i < root.numChildren; ++i) {
                let ctrl = GameUtility.getControlBFS(root.getChildAt(i), name, targetDepth - 1);
                if (ctrl) {
                    return ctrl;
                }
            }
            return null;
        }
    }
    static getChildByPath(root, path) {
        let reuslt = root;
        for (let n of path) {
            reuslt = GameUtility.getChildByName(reuslt, n);
        }
        return reuslt;
    }
    static getChildAt(root, idx) {
        return root.getChildAt(idx);
    }
    static parseTagIndex(name, tag) {
        let pos = name.search(tag);
        if (pos == -1)
            return pos;
        let subStr = name.substr(tag.length);
        if (subStr.length == 0)
            return -1;
        for (let i = 0; i < subStr.length; i++) {
            if (subStr[i] < '0' || subStr[i] > '9')
                return -1;
        }
        return Number(subStr);
    }
    static formatFundtring(val) {
        let fee = 0.0;
        let strDanwei;
        if (Math.floor(val / 1000000000000) > 0) {
            fee = val / 1000000000000;
            strDanwei = "E";
        }
        else if (Math.floor(val / 1000000000) > 0) {
            fee = val / 1000000000;
            strDanwei = "B";
        }
        else if (Math.floor(val / 1000000) > 0) {
            fee = val / 1000000;
            strDanwei = "M";
        }
        else if (Math.floor(val / 1000) > 0) {
            fee = val / 1000;
            strDanwei = "K";
        }
        else {
            fee = val;
            strDanwei = "";
        }
        if (fee > 999) {
            fee = 999;
        }
        let result = fee.toPrecision(3);
        result += strDanwei;
        return result;
    }
    static uinti8ArrayToString(arr) {
        let byte = new Laya.Byte(arr);
        // if (byte.length >= 2) {
        //     return byte.readString();
        // } else {
        //     return "";
        // }
        return byte.readUTFBytes();
    }
    static stringToUinti8Array(str) {
        let byte = new Laya.Byte();
        byte.writeUTFBytes(str);
        return byte.readUint8Array(0, byte.length);
    }
    static switchTexture(obj, texturePath, isChangeTextureSize = false) {
        if (obj == null)
            return;
        if (obj instanceof Laya.Image) {
            obj.skin = texturePath;
        }
        else if (obj instanceof Laya.Sprite) {
            obj.graphics.clear();
            var texture = Laya.loader.getRes(texturePath);
            if (!texture)
                console.log(" === : " + texturePath);
            obj.loadImage(texturePath);
            if (isChangeTextureSize && texture)
                obj.size(texture.width, texture.height);
        }
    }
    static getChildIndexByName(obj, name) {
        for (let i = 0; i < obj.numChildren; ++i) {
            let ctrl = obj.getChildAt(i);
            if (ctrl.name == name)
                return i;
        }
        return -1;
    }
    static swap(arr, idx1, idx2) {
        let temp = arr[idx1];
        arr[idx1] = arr[idx2];
        arr[idx2] = temp;
    }
}
exports.default = GameUtility;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Vector2 {
    constructor(x = 0, y = 0) {
        this.x = x;
        this.y = y;
    }
}
exports.Vector2 = Vector2;
class Vector3 {
    constructor(x = 0, y = 0, z = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    static normalize(s, out) {
        let x = s.x, y = s.y, z = s.z;
        let len = x * x + y * y + z * z;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = s.x * len;
            out.y = s.y * len;
            out.z = s.z * len;
        }
    }
    static distance(value1, value2) {
        let x = value1.x - value2.x;
        let y = value1.y - value2.y;
        let z = value1.z - value2.z;
        return Math.sqrt((x * x) + (y * y) + (z * z));
    }
    static cross(a, b, o) {
        let ax = a.x, ay = a.y, az = a.z, bx = b.x, by = b.y, bz = b.z;
        o.x = ay * bz - az * by;
        o.y = az * bx - ax * bz;
        o.z = ax * by - ay * bx;
    }
    static dot(a, b) {
        return (a.x * b.x) + (a.y * b.y) + (a.z * b.z);
    }
    static distanceSquared(value1, value2) {
        var x = value1.x - value2.x;
        var y = value1.y - value2.y;
        var z = value1.z - value2.z;
        return (x * x) + (y * y) + (z * z);
    }
    static add(a, b, out) {
        out.x = a.x + b.x;
        out.y = a.y + b.y;
        out.z = a.z + b.z;
    }
    static multiply(a, b, out) {
        out.x = a.x * b.x;
        out.y = a.y * b.y;
        out.z = a.z * b.z;
    }
}
Vector3.ZERO = new Vector3();
exports.Vector3 = Vector3;
var MathUtility;
(function (MathUtility) {
    let V3;
    (function (V3) {
        function add(v1, v2) {
            let result = new Vector3();
            Vector3.add(v1, v2, result);
            return result;
        }
        V3.add = add;
        function minus(v1, v2) {
            let result = this.add(v1, multiply(v2, -1));
            return result;
        }
        V3.minus = minus;
        function multiply(...args) {
            let result = new Vector3();
            if (typeof args[1] == "number") {
                result.x = args[0].x * args[1];
                result.y = args[0].y * args[1];
                result.z = args[0].z * args[1];
            }
            else {
                Vector3.multiply(args[0], args[1], result);
            }
            return result;
        }
        V3.multiply = multiply;
    })(V3 = MathUtility.V3 || (MathUtility.V3 = {}));
    let V2;
    (function (V2) {
        V2.Right = new Vector2(1, 0);
        function angle(v1, v2) {
            let v1Temp = new Vector3(v1.x, v1.y);
            let v2Temp = new Vector3(v2.x, v2.y);
            Vector3.normalize(v1Temp, v1Temp);
            Vector3.normalize(v2Temp, v2Temp);
            let dot = Vector3.dot(v1Temp, v2Temp);
            let tmp = new Vector3();
            Vector3.cross(v1Temp, v2Temp, tmp);
            if (tmp.z > 0) {
                return Math.acos(dot);
            }
            else {
                return 2 * Math.PI - Math.acos(dot);
            }
        }
        V2.angle = angle;
    })(V2 = MathUtility.V2 || (MathUtility.V2 = {}));
    function clamp(value, min, max) {
        if (value < min) {
            value = min;
        }
        if (value > max) {
            value = max;
        }
        return value;
    }
    MathUtility.clamp = clamp;
    let Direction;
    (function (Direction) {
        Direction[Direction["Left"] = 0] = "Left";
        Direction[Direction["Right"] = 1] = "Right";
        Direction[Direction["Down"] = 2] = "Down";
        Direction[Direction["Up"] = 3] = "Up";
    })(Direction = MathUtility.Direction || (MathUtility.Direction = {}));
    function isPointInside(rect, point) {
        return point.x > rect.x && point.y > rect.y && point.x < (rect.x + rect.width) && point.y < (rect.y + rect.height);
    }
    MathUtility.isPointInside = isPointInside;
    function inverseLerp(from, to, v) {
        return clamp(v / (to - from), 0, 1);
    }
    MathUtility.inverseLerp = inverseLerp;
})(MathUtility = exports.MathUtility || (exports.MathUtility = {}));
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Singleton {
    constructor() {
        this.map = {};
    }
    static getInstance(clas) {
        if (Singleton.instance == null) {
            Singleton.instance = new Singleton();
        }
        let className = clas;
        let obj = Singleton.instance.map[className];
        if (obj == null) {
            Singleton.instance.map[className] = new clas();
        }
        return Singleton.instance.map[className];
    }
}
exports.default = Singleton;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Singleton_1 = require("../core/Singleton");
class Game {
    constructor() {
        this.IS_DRAW_PLAYER_ATTACK_COLLISION = false;
    }
    static get instance() {
        return Singleton_1.default.getInstance(Game);
    }
}
exports.default = Game;
},{"../core/Singleton":6}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PhysicsUtility;
(function (PhysicsUtility) {
    PhysicsUtility.PLAYER_LAYER = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1;
    PhysicsUtility.ENV_LAYER = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;
    PhysicsUtility.ENEMY_LAYER = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER3;
})(PhysicsUtility = exports.PhysicsUtility || (exports.PhysicsUtility = {}));
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Singleton_1 = require("../core/Singleton");
class SceneManager {
    constructor() {
        this.threeDScenes = [];
    }
    static get instance() {
        return Singleton_1.default.getInstance(SceneManager);
    }
    setActive3DScene(s) {
        this.active3DScene = s;
    }
    getActive3DScene() {
        return this.active3DScene;
    }
    setActiveView(s) {
        this.activeView = s;
    }
    getActiveView() {
        return this.activeView;
    }
    loadSence3D(url) {
        return new Promise((rosolve, reject) => {
            Laya.Scene3D.load(url, new Laya.Handler(null, (s) => {
                Laya.stage.addChild(s);
                rosolve(s);
            }));
        });
    }
    loadSence(url) {
        return new Promise((rosolve, reject) => {
            Laya.Scene.load(url, new Laya.Handler(null, (s) => {
                rosolve(s);
            }));
        });
    }
    init() {
        Laya.Scene.root.zOrder = 1;
    }
}
exports.default = SceneManager;
},{"../core/Singleton":6}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Game_1 = require("../../gameplay/Game");
class AttackColliderControl extends Laya.Script3D {
    constructor() {
        super(...arguments);
        this.player = null;
        this.isPowered = false;
    }
    onStart() {
        this.collider = this.owner;
        this.setPowered(false);
    }
    onTriggerStay(other) {
        do {
            if (!this.isPowered) {
                break;
            }
            if (other.owner.name != "OniGroup") {
                break;
            }
            // OniGroupControl oni = other.GetComponent<OniGroupControl>();
            // if (oni == null)
            // {
            //     break;
            // }
            // //
            // oni.OnAttackedFromPlayer();
            this.player.onAttackOni(other.owner.transform.position);
        } while (false);
    }
    setPowered(sw) {
        this.isPowered = sw;
        if (Game_1.default.instance.IS_DRAW_PLAYER_ATTACK_COLLISION) {
            this.collider.meshRenderer.enable = sw;
        }
    }
}
exports.default = AttackColliderControl;
},{"../../gameplay/Game":7}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SceneManager_1 = require("../../gameplay/SceneManager");
class CameraControl extends Laya.Script3D {
    onAwake() {
        this.playerSprite = SceneManager_1.default.instance.getActive3DScene().getChildByName("Player");
        this.root = this.owner;
    }
    onUpdate() {
        let pos = this.root.transform.position;
        pos.x = this.playerSprite.transform.position.x;
        this.root.transform.position = pos;
    }
}
exports.default = CameraControl;
},{"../../gameplay/SceneManager":9}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SceneManager_1 = require("../../gameplay/SceneManager");
const PhysicsUtility_1 = require("../../gameplay/PhysicsUtility");
class FloorControl extends Laya.Script3D {
    constructor() {
        super(...arguments);
        this.WIDTH = 10.0 * 4.0;
        this.MODEL_NUM = 3;
    }
    onAwake() {
        this.mainCamera = SceneManager_1.default.instance.getActive3DScene().getChildByName("Main Camera Prefab");
        let map2 = this.owner.getChildByName("map2");
        map2.meshRenderer.receiveShadow = true;
        let col = map2.getComponent(Laya.PhysicsCollider);
        col.collisionGroup = PhysicsUtility_1.PhysicsUtility.ENV_LAYER;
        col.canCollideWith = PhysicsUtility_1.PhysicsUtility.PLAYER_LAYER;
    }
    onUpdate() {
        let totalWidth = this.WIDTH * this.MODEL_NUM;
        let floorPosition = this.owner.transform.position;
        let cameraPosition = this.mainCamera.transform.position;
        if (floorPosition.x + totalWidth / 2.0 < cameraPosition.x) {
            floorPosition.x += totalWidth;
            this.owner.transform.position = floorPosition;
        }
        if (cameraPosition.x < floorPosition.x - totalWidth / 2.0) {
            floorPosition.x -= totalWidth;
            this.owner.transform.position = floorPosition;
        }
    }
}
exports.default = FloorControl;
},{"../../gameplay/PhysicsUtility":8,"../../gameplay/SceneManager":9}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PlayerAnimationEventControl extends Laya.Script3D {
    playSwordSound() {
        this.playerControl.playSwordSound();
    }
}
exports.default = PlayerAnimationEventControl;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameUtility_1 = require("../../core/GameUtility");
const PhysicsUtility_1 = require("../../gameplay/PhysicsUtility");
const MathUtility_1 = require("../../core/MathUtility");
const AttackColliderControl_1 = require("./AttackColliderControl");
const PlayerAnimationEventControl_1 = require("./PlayerAnimationEventControl");
var ATTACK_MOTION;
(function (ATTACK_MOTION) {
    ATTACK_MOTION[ATTACK_MOTION["NONE"] = -1] = "NONE";
    ATTACK_MOTION[ATTACK_MOTION["RIGHT"] = 0] = "RIGHT";
    ATTACK_MOTION[ATTACK_MOTION["LEFT"] = 1] = "LEFT";
    ATTACK_MOTION[ATTACK_MOTION["NUM"] = 2] = "NUM";
})(ATTACK_MOTION || (ATTACK_MOTION = {}));
var STEP;
(function (STEP) {
    STEP[STEP["NONE"] = -1] = "NONE";
    STEP[STEP["RUN"] = 0] = "RUN";
    STEP[STEP["STOP"] = 1] = "STOP";
    STEP[STEP["MISS"] = 2] = "MISS";
    STEP[STEP["NUM"] = 3] = "NUM";
})(STEP || (STEP = {}));
var SpecialAttackStage;
(function (SpecialAttackStage) {
    SpecialAttackStage[SpecialAttackStage["Start"] = 0] = "Start";
    SpecialAttackStage[SpecialAttackStage["Rolling"] = 1] = "Rolling";
    SpecialAttackStage[SpecialAttackStage["End"] = 2] = "End";
})(SpecialAttackStage || (SpecialAttackStage = {}));
var AttackState;
(function (AttackState) {
    AttackState[AttackState["Idle"] = 0] = "Idle";
    AttackState[AttackState["NormalAttack"] = 1] = "NormalAttack";
    AttackState[AttackState["SpecialAttack"] = 2] = "SpecialAttack";
})(AttackState || (AttackState = {}));
class PlayerControl extends Laya.Script3D {
    constructor() {
        super(...arguments);
        this.swordSound = "oni_player01";
        this.swordHitSound = "oni_player02";
        this.missSound = "oni_player06";
        this.runSound = "oni_player07";
        this.attackSoundIdx = 0;
        this.runSpeed = 5;
        this.RUN_SPEED_MAX = 20.0;
        this.RUN_SPEED_ADD = 5.0;
        this.RUN_SPEED_SUB = 5.0 * 4.0;
        this.GRAVITY = 9.8;
        this.MISS_GRAVITY = 9.8 * 2.0;
        //private sceneControl: SceneControl;
        this.attackTimer = 0.0;
        this.attackDisableTimer = 0.0;
        this.ATTACK_TIME = 0.3;
        this.ATTACK_DISABLE_TIME = 1.0;
        this.isRunning = true;
        this.isContactFloor = false;
        this.isPlayable = true;
        this.stopPosition = -1.0;
        this.attackMotion = ATTACK_MOTION.LEFT;
        // public kiseki_left: AnimatedTextureExtendedUV = null;
        // public kiseki_right: AnimatedTextureExtendedUV = null;
        this.fxHit = null;
        this.fxRun = null;
        this.minRate = 0.0;
        this.maxRate = 3.0;
        this.step = STEP.NONE;
        this.nextStep = STEP.NONE;
        this.attackState = AttackState.Idle;
        this.specialAttackStage = SpecialAttackStage.End;
        //     private void sword_fx_control()
        //     {
        //         do
        //         {
        //             if (this.attackTimer <= 0.0f)
        //             {
        //                 break;
        //             }
        //             Animator animator = this.GetComponentInChildren<Animator>();
        //             AnimatorStateInfo state_info = animator.GetCurrentAnimatorStateInfo(0);
        //             AnimatorClipInfo clip_info = animator.GetCurrentAnimatorClipInfo(0)[0];
        //             AnimationClip clip = clip_info.clip;
        //             AnimatedTextureExtendedUV anim_player;
        //             switch (this.attack_motion)
        //             {
        //                 default:
        //                 case ATTACK_MOTION.RIGHT:
        //                     {
        //                         anim_player = this.kiseki_right;
        //                     }
        //                     break;
        //                 case ATTACK_MOTION.LEFT:
        //                     {
        //                         anim_player = this.kiseki_left;
        //                     }
        //                     break;
        //             }
        //             float start_frame = 2.5f;
        //             float start_time = start_frame / clip.frameRate;
        //             float current_time = state_info.normalizedTime * state_info.length;
        //             if (current_time < start_time)
        //             {
        //                 break;
        //             }
        //             anim_player.StartPlay(current_time - start_time);
        //         } while (false);
        //     }
    }
    onAwake() {
        this.rig = this.owner.getComponent(Laya.Rigidbody3D);
        this.rig.angularFactor = new Laya.Vector3(0, 0, 0);
        this.rig.collisionGroup = PhysicsUtility_1.PhysicsUtility.PLAYER_LAYER;
        this.rig.canCollideWith = PhysicsUtility_1.PhysicsUtility.ENV_LAYER | PhysicsUtility_1.PhysicsUtility.ENEMY_LAYER;
        GameUtility_1.default.getChildByName(this.owner, "chibi").skinnedMeshRenderer.castShadow = true;
        GameUtility_1.default.getChildByName(this.owner, "dekaino").skinnedMeshRenderer.castShadow = true;
        this.animator = GameUtility_1.default.getChildByName(this.owner, "model_samurai").getComponent(Laya.Animator);
        this.attackCollider = GameUtility_1.default.getChildByName(this.owner, "AttackCollider").addComponent(AttackColliderControl_1.default);
        this.attackCollider.player = this;
        let attckCol = GameUtility_1.default.getChildByName(this.owner, "AttackCollider").getComponent(Laya.PhysicsCollider);
        attckCol.collisionGroup = PhysicsUtility_1.PhysicsUtility.PLAYER_LAYER;
        attckCol.canCollideWith = PhysicsUtility_1.PhysicsUtility.ENEMY_LAYER;
        this.attackSound = ["oni_player03", "oni_player04", "oni_player05"];
        let cop = GameUtility_1.default.getChildByName(this.owner, "model_samurai").addComponent(PlayerAnimationEventControl_1.default);
        cop.playerControl = this;
    }
    onStart() {
        // this.attack_collider = GameObject.FindGameObjectWithTag("AttackCollider").GetComponent<AttackColliderControl>();
        // this.attack_collider.player = this;
        // this.kiseki_left = GameObject.FindGameObjectWithTag("FX_Kiseki_L").GetComponent<AnimatedTextureExtendedUV>();
        // this.kiseki_left.StopPlay();
        // this.kiseki_right = GameObject.FindGameObjectWithTag("FX_Kiseki_R").GetComponent<AnimatedTextureExtendedUV>();
        // this.kiseki_right.StopPlay();
        this.fxHit = GameUtility_1.default.getChildByName(this.owner, "OniHitParticle Prefab");
        this.fxRun = GameUtility_1.default.getChildByName(this.owner, "OniRunParticle Prefab");
        this.fxHit.particleSystem.stop();
        this.fxRun.particleSystem.stop();
        this.runSpeed = 0.0;
        this.nextStep = STEP.RUN;
        this.playSound(this.runSound, 0);
    }
    playSwordSound() {
        this.playSound(this.swordSound);
    }
    playSound(name, loops) {
        Laya.SoundManager.playSound(`sound/${name}.wav`, loops);
    }
    onUpdate() {
        this.minRate = MathUtility_1.MathUtility.clamp(this.minRate, 0.0, this.maxRate);
        this.maxRate = MathUtility_1.MathUtility.clamp(this.maxRate, this.minRate, 5);
        if (this.nextStep == STEP.NONE) {
            switch (this.step) {
                case STEP.RUN: {
                    if (!this.isRunning) {
                        if (this.runSpeed <= 0.0) {
                            this.fxRun.particleSystem.stop();
                            this.nextStep = STEP.STOP;
                        }
                    }
                    break;
                }
                case STEP.MISS: {
                    if (this.isContactFloor) {
                        this.fxRun.particleSystem.play();
                        this.rig.gravity = new Laya.Vector3(0, this.GRAVITY, 0);
                        this.nextStep = STEP.RUN;
                    }
                    break;
                }
            }
        }
        if (this.nextStep != STEP.NONE) {
            switch (this.nextStep) {
                case STEP.STOP: {
                    this.animator.crossFade("stop", 0.2);
                    break;
                }
                case STEP.MISS: {
                    let velocity = this.rig.linearVelocity;
                    let jumpHeight = 1.0;
                    velocity.x = 2.5;
                    velocity.y = Math.sqrt(this.MISS_GRAVITY * jumpHeight);
                    velocity.z = 0.0;
                    this.rig.linearVelocity = velocity;
                    this.rig.gravity = new Laya.Vector3(0, this.MISS_GRAVITY, 0);
                    this.runSpeed = 0.0;
                    this.animator.crossFade("yarare", 0.2);
                    this.playSound(this.missSound);
                    this.fxRun.particleSystem.stop();
                    break;
                }
                case STEP.RUN: {
                    this.animator.crossFade("run", 0.2);
                    break;
                }
            }
            this.step = this.nextStep;
            this.nextStep = STEP.NONE;
        }
        switch (this.step) {
            case STEP.RUN: {
                if (this.isRunning) {
                    this.runSpeed += this.RUN_SPEED_ADD * Laya.timer.delta * 0.001;
                }
                else {
                    this.runSpeed -= this.RUN_SPEED_SUB * Laya.timer.delta * 0.001;
                }
                this.runSpeed = MathUtility_1.MathUtility.clamp(this.runSpeed, 0.0, this.RUN_SPEED_MAX);
                let newVelocity = this.rig.linearVelocity;
                newVelocity.x = -this.runSpeed;
                if (newVelocity.y > 0.0) {
                    newVelocity.y = 0.0;
                }
                this.rig.linearVelocity = newVelocity;
                //this.attackControl();
                //this.swordFxControl();
                break;
            }
        }
        this.isContactFloor = false;
    }
    onCollisionStay(collision) {
        if (collision.other.owner.name == "OniGroup") {
            do {
                if (this.attackTimer > 0.0) {
                    break;
                }
                if (this.step == STEP.MISS) {
                    break;
                }
                this.nextStep = STEP.MISS;
                //this.scene_control.OnPlayerMissed();
                // OniGroupControl oniGroup = other.gameObject.GetComponent<OniGroupControl>();
                // oniGroup.OnPlayerHitted();
            } while (false);
        }
        else if (collision.other.owner.name == "map2") {
            this.isContactFloor = true;
        }
    }
    onCollisionEnter(collision) {
        this.onCollisionStay(collision);
    }
    onAttackOni(postion) {
        this.resetAttackDisableTimer();
        this.playHitEffect(postion);
        this.playHitSound();
    }
    playHitEffect(position) {
        this.fxHit.transform.position = position;
        this.fxHit.particleSystem.play();
    }
    playHitSound() {
        this.playSound(this.swordHitSound);
    }
    resetAttackDisableTimer() {
        this.attackDisableTimer = 0.0;
    }
    getAttackTimer() {
        return (this.ATTACK_TIME - this.attackTimer);
    }
    GetSpeedRate() {
        let playerSpeedRate = MathUtility_1.MathUtility.inverseLerp(0.0, this.RUN_SPEED_MAX, Laya.Vector3.scalarLength(this.rig.linearVelocity));
        return playerSpeedRate;
    }
    stopRequest() {
        this.isRunning = false;
    }
    playable() {
        this.isPlayable = true;
    }
    unPlayable() {
        this.isPlayable = false;
    }
    isStopped() {
        let isStopped = false;
        do {
            if (this.isRunning) {
                break;
            }
            if (this.runSpeed > 0.0) {
                break;
            }
            isStopped = true;
        } while (false);
        return isStopped;
    }
    calcDistanceToStop() {
        let distance = Laya.Vector3.scalarLength(this.rig.linearVelocity) / (2.0 * this.RUN_SPEED_SUB);
        return distance;
    }
    startSpecialAttack() {
        if (!this.isPlayable) {
            return;
        }
        if (this.attackState != AttackState.Idle) {
            return;
        }
        this.attackState = AttackState.SpecialAttack;
        this.specialAttackStage = SpecialAttackStage.Start;
        this.attackCollider.setPowered(true);
        this.animator.crossFade("attack_rot_s", 0.2);
        Laya.timer.once(200, null, () => {
            this.specialAttackStage = SpecialAttackStage.Rolling;
            this.animator.play("attack_rot");
        });
        this.playSound(this.swordSound);
        this.attackTimer = 0.315;
        this.playSound(this.attackSound[2]);
    }
    stopSpecialAttack() {
        if (this.attackState != AttackState.SpecialAttack) {
            return;
        }
        this.attackCollider.setPowered(false);
        this.specialAttackStage = SpecialAttackStage.End;
        this.animator.play("attack_rot_e");
        Laya.timer.once(500, null, () => {
            this.animator.crossFade("run", 0.2);
            Laya.timer.once(this.attackDisableTimer * 1000, null, () => {
                this.attackState = AttackState.Idle;
            });
        });
    }
    attackControl() {
        if (this.attackState == AttackState.SpecialAttack) {
            this.attackTimer -= Laya.timer.delta * 0.001;
            if (this.attackTimer < 0) {
                this.playSound(this.swordSound);
                this.attackTimer = 0.315;
            }
        }
    }
    normalAttack() {
        if (!this.isPlayable) {
            return;
        }
        if (this.attackState != AttackState.Idle) {
            return;
        }
        this.attackState = AttackState.NormalAttack;
        this.attackCollider.setPowered(true);
        Laya.timer.once(this.ATTACK_TIME * 1000, null, () => {
            this.attackCollider.setPowered(false);
            Laya.timer.once(this.ATTACK_DISABLE_TIME * 1000, null, () => {
                this.attackState = AttackState.Idle;
            });
        });
        switch (this.attackMotion) {
            default:
            case ATTACK_MOTION.RIGHT:
                this.attackMotion = ATTACK_MOTION.LEFT;
                break;
            case ATTACK_MOTION.LEFT:
                this.attackMotion = ATTACK_MOTION.RIGHT;
                break;
        }
        switch (this.attackMotion) {
            default:
            case ATTACK_MOTION.RIGHT:
                this.animator.crossFade("attack_r", 0.2);
                break;
            case ATTACK_MOTION.LEFT:
                this.animator.crossFade("attack_l", 0.2);
                break;
        }
        Laya.timer.once(600, null, () => {
            this.animator.crossFade("run", 0.2);
        });
        this.playSound(this.attackSound[this.attackSoundIdx]);
        this.attackSoundIdx = (this.attackSoundIdx + 1) % this.attackSound.length;
        this.playSound(this.swordSound);
    }
}
exports.default = PlayerControl;
},{"../../core/GameUtility":4,"../../core/MathUtility":5,"../../gameplay/PhysicsUtility":8,"./AttackColliderControl":10,"./PlayerAnimationEventControl":13}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PlayerControl_1 = require("../other/PlayerControl");
const CameraControl_1 = require("../other/CameraControl");
const FloorControl_1 = require("../other/FloorControl");
const GameUtility_1 = require("../../core/GameUtility");
class TitleSceneControl extends Laya.Script3D {
    onAwake() {
        let light = GameUtility_1.default.getChildByName(this.owner, "Directional light");
        light.shadow = true;
        light.shadowDistance = 100;
        light.shadowResolution = 2048;
        light.shadowPSSMCount = 1;
        light.shadowPCFType = 3;
        let player = this.owner.getChildByName("Player");
        player.addComponent(PlayerControl_1.default);
        let camera = this.owner.getChildByName("Main Camera Prefab");
        camera.addComponent(CameraControl_1.default);
        let floor1 = this.owner.getChildByName("Floor0 Prefab");
        floor1.addComponent(FloorControl_1.default);
        let floor2 = this.owner.getChildByName("Floor1 Prefab");
        floor2.addComponent(FloorControl_1.default);
        let floor3 = this.owner.getChildByName("Floor2 Prefab");
        floor3.addComponent(FloorControl_1.default);
    }
    onUpdate() {
    }
}
exports.default = TitleSceneControl;
},{"../../core/GameUtility":4,"../other/CameraControl":11,"../other/FloorControl":12,"../other/PlayerControl":14}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class FadeControl extends Laya.Script {
    onAwake() {
        this.timer = 0.0;
        this.fadeTime = 0.0;
        this.colorStart = new Laya.Color(0.0, 0.0, 0.0, 0.0);
        this.colorTarget = new Laya.Color(0.0, 0.0, 0.0, 0.0);
        this.imageCtrl = this.owner;
        this.fading = false;
    }
    onUpdate() {
        if (this.fadeTime) {
            if (this.timer < this.fadeTime) {
                let rate = this.timer / this.fadeTime;
                rate = Math.sin(rate * Math.PI / 2.0);
                let color = this.lerpColor(this.colorStart, this.colorTarget, rate);
                this.updateColor(color);
            }
            else {
                this.updateColor(this.colorTarget);
                this.fading = false;
            }
            this.timer += Laya.timer.delta * 0.001;
        }
    }
    lerpColor(l, r, t) {
        return new Laya.Color(Laya.MathUtil.lerp(l.r, r.r, t), Laya.MathUtil.lerp(l.g, r.g, t), Laya.MathUtil.lerp(l.b, r.b, t), Laya.MathUtil.lerp(l.a, r.a, t));
    }
    toHex(v) {
        let s = v.toString(16);
        if (s.length == 1) {
            s = "0" + s;
        }
        return s;
    }
    updateColor(color) {
        let c = "#" + this.toHex(color.r) + this.toHex(color.g) + this.toHex(color.b);
        this.imageCtrl.bgColor = c;
        this.imageCtrl.alpha = color.a;
    }
    fade(time, start, target) {
        this.imageCtrl.visible = true;
        this.fadeTime = time;
        this.timer = 0.0;
        this.colorStart = start;
        this.colorTarget = target;
        this.fading = true;
    }
    isActive() {
        return this.fading;
    }
}
exports.default = FadeControl;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FadeControl_1 = require("../extend/FadeControl");
const GameUtility_1 = require("../../core/GameUtility");
const SceneManager_1 = require("../../gameplay/SceneManager");
const PlayerControl_1 = require("../../script/other/PlayerControl");
var STEP;
(function (STEP) {
    STEP[STEP["NONE"] = -1] = "NONE";
    STEP[STEP["TITLE"] = 0] = "TITLE";
    STEP[STEP["WAIT_SE_END"] = 1] = "WAIT_SE_END";
    STEP[STEP["FADE_WAIT"] = 2] = "FADE_WAIT";
    STEP[STEP["NUM"] = 3] = "NUM";
})(STEP || (STEP = {}));
;
class TitleView extends Laya.Script {
    constructor() {
        super(...arguments);
        this.step = STEP.NONE;
        this.nextStep = STEP.NONE;
        this.stepTimer = 0.0;
        this.TITLE_ANIME_TIME = 0.1;
        this.FADE_TIME = 1.0;
    }
    onAwake() {
        this.fader = GameUtility_1.default.getChildByName(this.owner, "fade").getComponent(FadeControl_1.default);
        this.startImg = GameUtility_1.default.getChildByName(this.owner, "start");
    }
    onKeyDown(e) {
    }
    onStart() {
        // PlayerControl player = GameObject.FindGameObjectWithTag("Player").GetComponent<PlayerControl>();
        // player.UnPlayable();
        this.nextStep = STEP.TITLE;
        this.fader.fade(this.FADE_TIME, new Laya.Color(0.0, 0.0, 0.0, 1.0), new Laya.Color(0.0, 0.0, 0.0, 0.0));
    }
    onClick(e) {
        if (this.step == STEP.TITLE) {
            //this.nextStep = STEP.WAIT_SE_END;
            let player = GameUtility_1.default.getChildByName(SceneManager_1.default.instance.getActive3DScene(), "Player").getComponent(PlayerControl_1.default);
            player.normalAttack();
        }
    }
    onMouseDown(e) {
        let player = GameUtility_1.default.getChildByName(SceneManager_1.default.instance.getActive3DScene(), "Player").getComponent(PlayerControl_1.default);
        player.startSpecialAttack();
    }
    onMouseUp(e) {
        let player = GameUtility_1.default.getChildByName(SceneManager_1.default.instance.getActive3DScene(), "Player").getComponent(PlayerControl_1.default);
        player.stopSpecialAttack();
    }
    onUpdate() {
        this.stepTimer += Laya.timer.delta * 0.001;
        switch (this.step) {
            case STEP.FADE_WAIT:
                {
                    if (!this.fader.isActive()) {
                        console.log("load next scene");
                        //UnityEngine.SceneManagement.SceneManager.LoadScene("GameScene");
                    }
                }
                break;
        }
        if (this.nextStep != STEP.NONE) {
            switch (this.nextStep) {
                case STEP.WAIT_SE_END:
                    {
                        Laya.SoundManager.playSound("sound/oni_system01.wav", 1, new Laya.Handler(null, () => {
                            this.fader.fade(this.FADE_TIME, new Laya.Color(0.0, 0.0, 0.0, 0.0), new Laya.Color(0.0, 0.0, 0.0, 1.0));
                            this.nextStep = STEP.FADE_WAIT;
                        }));
                    }
                    break;
            }
            this.step = this.nextStep;
            this.nextStep = STEP.NONE;
            this.stepTimer = 0.0;
        }
        switch (this.step) {
            case STEP.WAIT_SE_END:
                {
                    let rate = this.stepTimer / this.TITLE_ANIME_TIME;
                    if (rate > 1) {
                        rate = 1;
                    }
                    let scale = Laya.MathUtil.lerp(2.0, 1.0, rate);
                    this.startImg.scale(scale, scale);
                }
                break;
        }
    }
}
exports.default = TitleView;
},{"../../core/GameUtility":4,"../../gameplay/SceneManager":9,"../../script/other/PlayerControl":14,"../extend/FadeControl":16}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
